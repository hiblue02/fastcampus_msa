plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.1'
    id 'io.spring.dependency-management' version '1.1.4'
    id("com.palantir.docker") version "0.35.0"
}
ext{
    axonVersion = "4.6.0"
}

group = 'com.example.banking'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    implementation 'org.hibernate.validator:hibernate-validator:7.0.1.Final'
    implementation 'org.jetbrains:annotations:23.0.0'
    implementation group: 'javax.persistence', name:'javax.persistence-api', version: '2.2'
    testImplementation 'junit:junit:4.13.1'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    compileOnly 'javax.servlet:javax.servlet-api:4.0.1'
    implementation project(':common')
    runtimeOnly('com.h2database:h2')

    implementation group: 'org.axonframework', name: 'axon-configuration', version: "$axonVersion"
    implementation group: 'org.axonframework', name: 'axon-spring-boot-starter', version: "$axonVersion"
}

test {
    useJUnitPlatform()
}

docker {
    // BootJar 출력 파일
    def bootJarOutput = tasks.bootJar.outputs.files

    // 이미지 이름
    name "${rootProject.name}-${project.name}:${version}"

    // DockerFile 경로
    dockerfile file('../Dockerfile')

    // DockerFile에 복사할 파일들
    files bootJarOutput
    buildArgs(['JAR_FILE': bootJarOutput.singleFile.name])
}

